===========================================================
RTOS Topic: TIMERS & TICK MANAGEMENT
===========================================================

System Tick
-----------
- RTOS scheduler relies on a periodic "tick interrupt".
- Commonly driven by SysTick timer (on ARM Cortex-M).
- Each tick increments kernel time and drives:
   * Task delays (vTaskDelay, vTaskDelayUntil).
   * Timeouts (queue/semaphore waits).
   * Software timers.

Tick Frequency:
---------------
- High tick rate (e.g., 1ms):
   + Fine time resolution.
   - More CPU overhead (more interrupts).
- Low tick rate (e.g., 10ms):
   + Less CPU overhead.
   - Coarse resolution (cannot schedule finer delays).

Rule of thumb:
- Choose smallest tick period that meets timing needs
  without wasting CPU.

-----------------------------------------------------------
Tickless RTOS
-----------------------------------------------------------
- Power-saving mode.
- Instead of firing every 1ms:
   * RTOS calculates "next wakeup event".
   * Programs hardware timer to wake CPU just before event.
   * CPU sleeps longer in low-power mode.

Use case:
- IoT sensor node → sleeps for seconds, wakes for short task.

===========================================================
Software Timers vs Hardware Timers
===========================================================

Hardware Timer:
---------------
- Peripheral built into MCU (Timer, SysTick, RTC).
- Runs independently of CPU.
- Generates interrupts at precise intervals.
- Very accurate and low jitter.
- Limited in number (MCUs have few hardware timers).

Use cases:
- Generating PWM signals.
- Measuring input capture (frequency, pulse width).
- Creating very precise periodic interrupts.
- Watchdog timers.

-----------------------------------------------------------
Software Timer:
---------------
- Provided by RTOS, built on top of hardware tick.
- Implemented in software by the RTOS kernel.
- Managed by "timer service task".
- Resolution limited to RTOS tick rate (e.g., 1ms).
- Less accurate than hardware timer, may have jitter if
  higher-priority tasks delay the timer task.
- Unlimited in number (only limited by memory).

Use cases:
- Scheduling periodic tasks (LED blink, status check).
- Implementing timeouts (retry, watchdog-like behavior).
- Non-critical timing where 1ms+ resolution is acceptable.

-----------------------------------------------------------
Key Differences:
-----------------------------------------------------------
1. Source:
   - Hardware timer = dedicated MCU peripheral.
   - Software timer = RTOS constructs based on tick.

2. Accuracy:
   - Hardware timer = precise, microsecond resolution.
   - Software timer = limited by tick resolution (1ms typical).

3. Priority:
   - Hardware ISR runs immediately on interrupt.
   - Software timer callback runs in timer task context (can be delayed).

4. Availability:
   - Hardware timers are few.
   - Software timers are virtually unlimited.

5. Best Practice:
   - Use hardware timers for precise, low-latency events.
   - Use software timers for general scheduling and timeouts.
===========================================================
-----------------------------------------------------------
FreeRTOS Example
-----------------------------------------------------------

void vOneShotCallback(TimerHandle_t xTimer) {
    printf("One-shot fired\n");
}

void vPeriodicCallback(TimerHandle_t xTimer) {
    printf("Periodic fired\n");
}

int main(void) {
    TimerHandle_t xOneShot, xPeriodic;

    // One-shot timer: expires once after 1000 ms
    xOneShot = xTimerCreate("OneShot",
                            pdMS_TO_TICKS(1000),
                            pdFALSE,
                            0,
                            vOneShotCallback);

    // Periodic timer: expires every 500 ms
    xPeriodic = xTimerCreate("Periodic",
                             pdMS_TO_TICKS(500),
                             pdTRUE,
                             0,
                             vPeriodicCallback);

    xTimerStart(xOneShot, 0);
    xTimerStart(xPeriodic, 0);

    vTaskStartScheduler();
}

-----------------------------------------------------------
Key Takeaways
-----------------------------------------------------------
- Tick = scheduler heartbeat.
- Balance tick rate: resolution vs CPU load.
- Tickless mode = better power efficiency.
- Software timers = callbacks after delay/period.
- Always keep timer callbacks short → defer heavy work to tasks.
===========================================================
