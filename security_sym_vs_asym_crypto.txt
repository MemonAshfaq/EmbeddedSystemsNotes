====================================================
2. SYMMETRIC VS ASYMMETRIC CRYPTOGRAPHY
====================================================

SYMMETRIC CRYPTOGRAPHY
----------------------------------------------------
- Same key used for encryption & decryption.
- Very fast → best for large/bulk data.
- Weakness: key distribution (sharing secret key securely).
- Examples: AES, ChaCha20.

AES (Advanced Encryption Standard)
- Block cipher, 128-bit blocks.
- Key sizes: 128, 192, 256 bits.
- Modes of operation:
   • ECB: insecure (patterns leak).
   • CBC: random IV for each block chain.
   • GCM: provides both encryption + integrity.
- Used in:
   • Disk encryption
   • VPN traffic
   • Encrypted firmware storage

----------------------------------------------------
ASYMMETRIC CRYPTOGRAPHY
----------------------------------------------------
- Uses key pair: PUBLIC key + PRIVATE key.
- Two distinct use cases:

1. Encryption/Decryption (Confidentiality)
   - Encrypt with RECEIVER’s PUBLIC key.
   - Decrypt with RECEIVER’s PRIVATE key.
   - Ensures only receiver can read the message.

2. Signing/Verification (Authenticity + Integrity)
   - Sender signs data hash with their PRIVATE key.
   - Receiver verifies signature with sender’s PUBLIC key.
   - Confirms data came from trusted source, not altered.

- Algorithms:
   • RSA: security based on difficulty of factoring large composite numbers 
           (n = p × q, product of two large primes).
           - Easy to multiply p × q, but very hard to factor n back into p and q.
           - Without p and q, attacker cannot compute private key.
   • ECC: smaller keys, faster, strong security → better for embedded.

----------------------------------------------------
RSA MATH RELATIONSHIP (How n, p, q, d are linked)
----------------------------------------------------
1. Pick two primes p and q.
2. Compute modulus: n = p × q.
3. Compute totient: φ(n) = (p-1)(q-1).
4. Choose public exponent e (commonly 65537).
5. Compute private exponent d:
      d = modular inverse of e mod φ(n)
      (d × e) ≡ 1 (mod φ(n))

- Public key = (n, e)
- Private key = (n, d)

Example (small numbers):
- p = 5, q = 11
- n = 55
- φ(n) = (5-1)(11-1) = 40
- e = 3
- d = 27 (since 3×27 = 81 ≡ 1 mod 40)
- Public key = (55, 3)
- Private key = (55, 27)

Summary:
- Private key d depends on φ(n).
- φ(n) depends on p and q.
- To break RSA, attacker must factor n → find p, q → compute φ(n) → compute d.

----------------------------------------------------
FW AUTHENTICATION EXAMPLE
----------------------------------------------------
- Vendor signs firmware hash with PRIVATE key.
- Device stores PUBLIC key in ROM/OTP.
- Bootloader verifies firmware signature using PUBLIC key.
- Prevents tampered/unauthorized firmware from running.

----------------------------------------------------
HOW THEY WORK TOGETHER (Hybrid)
----------------------------------------------------
- Asymmetric crypto is slow → used only to exchange keys / verify.
- Once session key is exchanged → Symmetric crypto (AES) used for bulk data.
- Example: HTTPS
   • Server sends public key.
   • Client encrypts random session key → sends to server.
   • Server decrypts with private key.
   • Both now share session key for AES.

----------------------------------------------------
CODE EXAMPLES (Pseudo-C)
----------------------------------------------------
Symmetric (AES):
-------------------------------------------
ciphertext = aes_encrypt(plaintext, key);
plaintext  = aes_decrypt(ciphertext, key);

Asymmetric (RSA):
-------------------------------------------
ciphertext = rsa_encrypt(plaintext, public_key);
plaintext  = rsa_decrypt(ciphertext, private_key);

Signature Verification (FW Auth):
-------------------------------------------
sig = sign(hash(firmware), private_key);
verify = rsa_verify(sig, hash(firmware), public_key);

----------------------------------------------------
SUMMARY
----------------------------------------------------
- Symmetric: fast, one key, good for large data, weak distribution.
- Asymmetric: slow, key pairs, solves distribution, used for signatures.
- Public key: 
   • Encrypt (confidentiality) OR Verify signature (authenticity).
- Private key:
   • Decrypt (confidentiality) OR Sign (authenticity).
- Real-world: Hybrid = combine both.
====================================================
